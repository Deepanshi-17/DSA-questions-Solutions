Recursion - TC - O(2^N) SC - O(N)
#include <bits/stdc++.h> 
bool fun(int index, int target, vector<int> &arr)
{
    if(index < 0) return false;
    if(target == 0)
    return true;
    if(index == 0)
    {
        if(arr[index] == target) return true;
    }
    bool not_take = fun(index - 1, target, arr);
    bool take = false;
    if(arr[index] <= target)
    {
        take = fun(index - 1, target - arr[index], arr);
    }
    return not_take || take;
}
bool subsetSumToK(int n, int k, vector<int> &arr) {
    return fun(n-1, k, arr);
}

Memoization TC - O(N*K) SC - O(N*K) + O(N)
#include <bits/stdc++.h> 
bool fun(int index, int target, vector<int> &arr, vector<vector<int>>& dp)
{
    if(index < 0) return false;
    if(dp[index][target] != -1) return dp[index][target];
    if(target == 0)
    return true;
    if(index == 0)
    {
        if(arr[index] == target) return true;
    }
    bool not_take = fun(index - 1, target, arr, dp);
    bool take = false;
    if(arr[index] <= target)
    {
        take = fun(index - 1, target - arr[index], arr, dp);
    }
    return dp[index][target] = not_take || take;
}
bool subsetSumToK(int n, int k, vector<int> &arr) {
    vector<vector<int>>dp(n+1,vector<int>(k+1,-1));
    return fun(n-1, k, arr,dp);
}

Tabulation TC - O(N*K) SC - O(N*K)
#include <bits/stdc++.h> 
bool subsetSumToK(int n, int k, vector<int> &arr) {
    vector<vector<int>>dp(n,vector<int>(k+1));
        for(int i = 0; i < n; i++)
    {
        dp[i][0] = true;
    }
    if(arr[0] <= k)
    dp[0][arr[0]] = true;

    for(int i = 1; i < n; i++)
    {
        for(int j = 1; j < k + 1; j++)
        {
            bool not_take = dp[i-1][j];
            bool take = false;
            if(j - arr[i] >= 0)
            {
                take = dp[i-1][j-arr[i]];
            }
            dp[i][j] = take || not_take;
        }
    }

    return dp[n-1][k];
}

Space Optimization TC - O(N*K) SC - O(K)
#include <bits/stdc++.h> 
bool subsetSumToK(int n, int k, vector<int> &arr) {
    vector<vector<int>>dp(n,vector<int>(k+1));
        for(int i = 0; i < n; i++)
    {
        dp[i][0] = true;
    }
    if(arr[0] <= k)
    dp[0][arr[0]] = true;

    for(int i = 1; i < n; i++)
    {
        for(int j = 1; j < k + 1; j++)
        {
            bool not_take = dp[i-1][j];
            bool take = false;
            if(j - arr[i] >= 0)
            {
                take = dp[i-1][j-arr[i]];
            }
            dp[i][j] = take || not_take;
        }
    }

    return dp[n-1][k];
}
