Solution 1 TC - O(N*logN) SC - O(N)

#include<bits/stdc++.h>
vector < int > sortedArray(vector < int > a, vector < int > b) {
    set<int>st;
    for(int i = 0; i < a.size(); i++)
    {
        st.insert(a[i]);
    }
        for(int i = 0; i < b.size(); i++)
    {
        st.insert(b[i]);
    }
    vector<int>ans(st.begin(),st.end());
    return ans;
}

Solution 2 - 
#include<bits/stdc++.h>

vector < int > sortedArray(vector < int > a, vector < int > b) {
    map<int,int>mp;
    for(int i = 0; i < a.size(); i++)
    {
        if(mp.find(a[i]) != mp.end())
        {
            mp[a[i]]++;
        }
        else
        {
            mp[a[i]] = 1;
        }
    }
    for(int i = 0; i < b.size(); i++)
    {
        if(mp.find(b[i]) != mp.end())
        {
            mp[b[i]]++;
        }
        else
        {
            mp[b[i]] = 1;
        }
    }
    vector<int>ans;
    for(auto it: mp)
    {
        ans.push_back(it.first);
    }
    return ans;
}

Solution 3 - Optimal TC - O(N) SC- O(N)
vector < int > sortedArray(vector < int > a, vector < int > b) {
    int i = 0;
    int j = 0;
    int n = a.size();
    int m = b.size();
    vector<int>ans;
    while(i < n && j < m)
    {
        if(a[i] <= b[j])
        {
            if(ans.size()==0 || ans.back() != a[i])
            {
                ans.push_back(a[i]);
            }
            i++;
        }
        else
        {
            if(ans.size() == 0 || ans.back() != b[j])
            {
                ans.push_back(b[j]);
            }
            j++;
        }
    }
    while(i < n )
    {
        if(ans.back() != a[i])
        ans.push_back(a[i]);
        i++;
    }
    while(j < m)
    {
        if(ans.back() != b[j])
        ans.push_back(b[j]);
        j++;
    }
    return ans;
}
