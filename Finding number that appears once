Solution 1- Hashing
TC - (O(N*logN) + O(N)
sc - O(N)

class Solution {
public:
    int singleNumber(vector<int>& nums) {
        unordered_map<int,int>mp;
        for(int i = 0; i < nums.size(); i++)
        {
            if(mp.find(nums[i]) != mp.end())
            {
                mp[nums[i]]++;
            }
            else
            {
                mp[nums[i]] = 1;
            }
        }
        for(auto it: mp)
        {
            if(it.second == 1)
            return it.first;
        }
        return -1;
    }
};

Solution 2 - TC - O(N^2) Brute Force
SC - O(1)
class Solution {
public:
    int singleNumber(vector<int>& nums) {
        for(int i = 0; i < nums.size(); i++)
        {
            int cnt = 0;
            for(int j = 0; j < nums.size(); j++)
            {
                if(nums[i] == nums[j])
                cnt++;
            }
            if(cnt == 1)
            return nums[i];
        }
        return 0;
    }
};

Solution 3 - TC - O(N) XOR 
class Solution {
public:
    int singleNumber(vector<int>& nums) {
        int XOR = 0;
        for(int i = 0; i < nums.size(); i++)
        {
            XOR ^= nums[i];
        }
        return XOR;
    }
};
