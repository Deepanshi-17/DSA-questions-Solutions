Solution 1 - TC - O(N^3) SC - O(1)

int findAllSubarraysWithGivenSum(vector < int > & arr, int k) {
    int count = 0;
    for(int i = 0; i < arr.size(); i++)
    {
        for(int j = i; j < arr.size(); j++)
        {
            int sum = 0;
            for(int k = i; k <=j; k++)
            {
                sum += arr[k];
            }
            if(sum == k)
            count++;
        }
    }
    return count;
}

Solution 2 - TC - O(N^2) SC - O(1)

int findAllSubarraysWithGivenSum(vector < int > & arr, int k) {
    int count = 0;
    for(int i = 0; i < arr.size(); i++)
    {
        int sum = 0;
        for(int j = i; j < arr.size(); j++)
        {
            sum += arr[j];

            if(sum == k)
            count++;
        }
    }
    return count;
}

Solution 3 TC - O(N) SC - O(N)

int findAllSubarraysWithGivenSum(vector < int > & arr, int k) {
    int count = 0;
    map<int,int>mp;
    mp[0] = 1;
    int presum = 0;
    for(int i = 0; i < arr.size(); i++)
    {
        presum += arr[i];
        int remove = presum - k;
        count += mp[remove];
        mp[presum]++;
    }
    return count;
}
