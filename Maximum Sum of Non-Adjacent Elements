Recursion 
TC - O(2^N) SC - O(N)
#include <bits/stdc++.h> 
int fun(int index, vector<int>& nums)
{
    if(index == 0) return nums[0];
    if(index == 1) return max(nums[0],nums[1]);
    return max(fun(index-1,nums), fun(index - 2, nums) + nums[index]);
}
int maximumNonAdjacentSum(vector<int> &nums){
    int n = nums.size();
    return fun(n-1, nums);
}

Memoization
TC - O(N) SC - O(N + N)
#include <bits/stdc++.h> 
int fun(int index, vector<int>& nums, vector<int>& dp)
{
    if(dp[index] != -1) return dp[index];
    if(index == 0) return dp[index] = nums[0];
    if(index == 1) return dp[index] = max(nums[0],nums[1]);
    return dp[index] = max(fun(index-1,nums,dp), fun(index - 2, nums, dp) + nums[index]);
}
int maximumNonAdjacentSum(vector<int> &nums){
    int n = nums.size();
    vector<int>dp(n,-1);
    return fun(n-1, nums, dp);
}

Tabulation 
TC - O(N) SC- O(N)

int maximumNonAdjacentSum(vector<int> &nums){
    int n = nums.size();
    vector<int>dp(n);
    dp[0] = nums[0];
    dp[1] = max(nums[0],nums[1]);
    for(int i = 2; i < n; i++)
    {
        dp[i] = max(dp[i-1], dp[i-2] + nums[i]);
    }
    return dp[n-1];
}

Space Optimization
TC - O(N) SC - O(1)

int maximumNonAdjacentSum(vector<int> &nums){
    int n = nums.size();
    vector<int>dp(n);
    int vprev = nums[0];
    int prev = max(nums[0],nums[1]);
    for(int i = 2; i < n; i++)
    {
        int curr = max(prev, vprev + nums[i]);
        vprev = prev;
        prev = curr;
    }
    return prev;
}
