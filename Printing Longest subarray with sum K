Solution 1 - TC - O(N^2) TC - O(1)

int longestSubarrayWithSumK(vector<int> a, long long k) {
    int maxi = 0;
    for(int i = 0; i < a.size(); i++)
    {
        long long sum = 0;
        for(int j = i; j < a.size(); j++)
        {
            sum += a[j];
            if(sum == k)
            maxi = max(maxi, j-i+1);
        }
    }
    return maxi;
}

Solution 2 - TC - O(N) SC - O(1)
int longestSubarrayWithSumK(vector<int> a, long long k) {
    int right = 0;
    int left = 0;
    long long sum = 0;
    int maxi = 0;
    while(right < a.size())
    {
        sum += a[right];
        while(sum > k && left <= right)
        {
            sum -= a[left];
            left++;
        }
        if(sum == k)
        {
            maxi = max(maxi, right-left+1);
        }
        right++;
    }
    return maxi;
}
