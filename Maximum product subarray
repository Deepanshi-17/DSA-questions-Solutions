Solution 1 - TC - O(N^3) SC - O(1)
#include<vector>
#include<bits/stdc++.h>

int subarrayWithMaxProduct(vector<int> &arr){
	int maxi = INT_MIN;
	int n = arr.size();
	for(int i = 0; i < n; i++)
	{
		for(int j = i; j < n; j++)
		{
			int prod = 1;
			for(int k = i; k <=j; k++)
			{
				prod *= arr[k];
				maxi = max(maxi, prod);
			}
		}
	}
	return maxi;
}

Solution 2 - TC - O(N^2) SC - O(1)
#include<vector>
#include<bits/stdc++.h>

int subarrayWithMaxProduct(vector<int> &arr){
	int maxi = INT_MIN;
	int n = arr.size();
	for(int i = 0; i < n; i++)
	{
		int prod = 1;
		for(int j = i; j < n; j++)
		{
			prod *= arr[j];
			maxi = max(maxi, prod);
		}
	}
	return maxi;
}

Solution 3 TC - O(N) SC - O(1)
#include<vector>
#include<bits/stdc++.h>

int subarrayWithMaxProduct(vector<int> &arr){
	// Write your code here.
	int n = arr.size();
	int suff = 1;
	int pre = 1;
	int maxi = INT_MIN;
	for(int i = 0; i < n; i++)
	{
		if(pre == 0) pre = 1;
		if(suff == 0) suff = 1;
		pre *= arr[i];
		suff *= arr[n-i-1];
		maxi = max(maxi, max(pre,suff));
	}
	return maxi;
}

Solution 4 - TC - O(N) SC - O(1)
#include<vector>

int subarrayWithMaxProduct(vector<int> &arr){
	int n = arr.size();
	int prod1 = arr[0];
	int prod2 = arr[0];
	int result = arr[0];
	for(int i = 1; i < n; i++)
	{
		int temp = max(arr[i], max(arr[i]*prod1, arr[i]*prod2));
		prod2 = min(arr[i], min(arr[i]*prod1, arr[i]*prod2));
		prod1 = temp;
		result = max(result, prod1);
	}
	return result;
}
