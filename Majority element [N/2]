Solution 1 - TC - O(N^2) + O(N) SC - O(N) 
class Solution {
public:
    int majorityElement(vector<int>& nums) {
        int n = nums.size();
        map<int,int>mp;
        for(int i = 0; i < nums.size(); i++)
        {
            if(mp.find(nums[i])!= mp.end())
            {
                mp[nums[i]]++;
            }
            else
            {
                mp[nums[i]] = 1;
            }
        }
        for(auto it: mp)
        {
            if(it.second > (n/2))
            return it.first;
        }
        return -1;
    }
};

Solution 2 - TC - O(N^2)
class Solution {
public:
    int majorityElement(vector<int>& nums) {
        for(int i = 0; i < nums.size(); i++)
        {
            int count = 0;
            for(int j = 0; j < nums.size(); j++)
            {
                if(nums[i] == nums[j])
                count++;
                if(count > (nums.size()/2))
                return nums[i];
            }
        }
        return -1;
    }
};

Solution 2 - Moore's Voting Algorithm TC - O(N) SC - O(1)
class Solution {
public:
    int majorityElement(vector<int>& nums) {
        int ele;
        int cnt = 0;
        for(int i = 0; i < nums.size(); i++)
        {
            if(cnt == 0)
            {
                ele = nums[i];
                cnt = 1;
            }
            else if(ele == nums[i])
            {
                cnt++;
            }
            else
            cnt--;
        }

        int cnt1 = 0;
        for(int i = 0; i < nums.size(); i++)
        {
            if(nums[i] == ele)
            {
                cnt1++;
            }
        }
        if(cnt1 > nums.size()/2)
        return ele;
        return -1;
    }
};
