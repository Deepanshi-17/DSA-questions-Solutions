Recursion TC - O(2^(N*M)) SC - O(N)
class Solution {
public:
    int fun(int row, int col, int m, int n)
    {
        if(row >= m || col >= n) return 0;
        if(row == m-1 && col == n-1) 
        {
            return 1;
        }
        return fun(row + 1, col, m, n) + fun(row, col + 1, m, n);
    }
    int uniquePaths(int m, int n) {
        return fun(0,0,m,n);
    }
};

Memoization TC - O(N*M)  SC - O(N*M) + O(N-1 + M-1)
class Solution {
public:
    int fun(int row, int col, int m, int n, vector<vector<int>>& dp)
    {
        if(dp[row][col] != -1) return dp[row][col];
        if(row >= m || col >= n) return 0;
        if(row == m-1 && col == n-1) 
        {
            return 1;
        }
        return dp[row][col] = fun(row + 1, col, m, n, dp) + fun(row, col + 1, m, n, dp);
    }
    int uniquePaths(int m, int n) {
        vector<vector<int>>dp(m+1,vector<int>(n+1,-1));
        return fun(0,0,m,n, dp);
    }
};

Tabulation TC - O(N*M) SC - O(N*M)
class Solution {
public:
    int uniquePaths(int m, int n) {
        vector<vector<int>>dp(m+1,vector<int>(n+1));
        dp[0][0] = 1;
        for(int i = 0; i < m; i++)
        {
            for(int j = 0; j < n; j++)
            {
                if(i==0 && j == 0)
                {
                    dp[i][j] = 1;
                    continue;
                }
                int up = 0;
                int up_left = 0;
                if(i > 0)
                up = dp[i-1][j];
                if(j > 0)
                up_left = dp[i][j-1];
                dp[i][j] = up + up_left;
            }
        }
        return dp[m-1][n-1];
    }
};

Space optimization TC - O(N*M) SC - O(N)
class Solution {
public:
    int uniquePaths(int m, int n) {
        vector<int>prev(n+1);
        prev[0] = 1;
        for(int i = 0; i < m; i++)
        {
            vector<int>temp(n+1);
            for(int j = 0; j < n; j++)
            {
                if(i == 0 && j == 0)
                { temp[j] = 1; continue;}
                int up = 0;
                int up_left = 0;
                if(i > 0)
                up = prev[j];
                if(j > 0)
                up_left = temp[j-1];
                temp[j] = up + up_left;
            }
            prev = temp;
        }
        return prev[n-1];
    }
};
