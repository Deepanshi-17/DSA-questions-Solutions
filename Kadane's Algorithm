Solution 1 - TC - O(N^3)
class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        int maxi = INT_MIN;
        int n = nums.size();
        for(int i = 0; i < n; i++)
        {
            for(int j = i; j<n; j++)
            {
                int sum = 0;
                for(int k = i; k <=j; k++)
                {
                    sum += nums[k];
                }
                maxi = max(maxi, sum);
            }
        }
        return maxi;
    }
};

Solution 2 - TC- O(N^2) SC - O(1)
class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        int n = nums.size();
        int maxi = INT_MIN;
        for(int i = 0; i < n; i++)
        {
            int sum = 0;
            for(int j = i; j < n; j++)
            {
                sum += nums[j];
                maxi = max(maxi, sum);
            }
        }
        return maxi;
    }
};

Solution 3 TC - O(N) SC - O(1)
class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        int sum = 0;
        int maxi = INT_MIN;
        for(int i = 0; i < nums.size(); i++)
        {
            sum += nums[i];
            maxi = max(maxi, sum);
            if(sum < 0)
            {
                sum = 0;
            }
        }
        return maxi;

    }
};
