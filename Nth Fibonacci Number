//Recursion TC - O(2^N) SC - O(N)
#include<bits/stdc++.h>
using namespace std;
int fun(int n)
{
        if(n <=1)
        return n;
        else
        return fun(n-1) + fun(n-2);
}
int main()
{
        int n;
        cin>>n;
        cout<<fun(n);
        return 0;
}

//Memoization TC - O(N) SC - O(N) + O(N)
#include<bits/stdc++.h>
using namespace std;
int fun(int n, vector<int>& dp)
{
        if(dp[n] != -1) return dp[n];
        if(n <=1)
        return dp[n] = n;
        else
        return dp[n] = fun(n-1, dp) + fun(n-2, dp);
}
int main()
{
        int n;
        cin>>n;
        vector<int>dp(n+1,-1);
        cout<<fun(n,dp);
        return 0;
}

//Tabulation TC - O(N) SC - O(N)

#include<bits/stdc++.h>
using namespace std;

int main()
{
        int n;
        cin>>n;
        vector<int>dp(n+1);
        dp[0] = 0;
        dp[1] = 1;
        for(int i = 2; i <=n; i++)
        {
                dp[i] = dp[i-1] + dp[i-2];
        }
        cout<<dp[n];
        return 0;
}

#include<bits/stdc++.h>
using namespace std;


//Space Optimization TC - O(N) SC - O(1)
int main()
{
        int n;
        cin>>n;
        vector<int>dp(n+1);
        int prev2 = 0;
        int prev1 = 1;
        for(int i = 2; i <=n; i++)
        {
                int temp = prev2 + prev1;
                prev2 = prev1;
                prev1 = temp;
        }
        cout<<prev1;
        return 0;
}
