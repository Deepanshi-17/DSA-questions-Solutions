Solution 1:- TC- O(NlogN) SC - O(1)

class Solution {
public:
    void sortColors(vector<int>& nums) {
        sort(nums.begin(),nums.end());
    }
};

Solution 2:-  O(N) + O(N) SC - O(1)
class Solution {
public:
    void sortColors(vector<int>& nums) {
        int one = 0;
        int zero = 0;
        int two = 0;
        for(int i = 0; i < nums.size(); i++)
        {
            if(nums[i] == 0)
            {
                zero++;
            }
            else if(nums[i] == 1)
            {
                one++;
            }
            else if(nums[i] == 2)
            {
                two++;
            }
        }
        for(int i = 0; i < zero; i++)
        {
            nums[i] = 0;
        }
        for(int i = zero; i < zero + one; i++)
        {
            nums[i] = 1;
        }
        for(int i = zero+one; i < zero+one+two; i++)
        {
            nums[i] = 2;
        }
    }
};

Solution 2 - TC - O(N) SC - O(1)
class Solution {
public:
    void sortColors(vector<int>& nums) {
        int low = 0;
        int mid = 0;
        int high = nums.size()-1;
        while(mid <= high)
        {
            if(nums[mid] == 0)
            {
                swap(nums[low],nums[mid]);
                low++;
                mid++;
            }
            else if(nums[mid] == 1)
            {
                mid++;
            }
            else 
            {
                swap(nums[mid],nums[high]);
                high--;
            }
        }
    }
};
