Recursion TC - O(2^N) SC- O(N)
#include <bits/stdc++.h>
int fun(int index, vector<int>& heights)
{
    if(index == 0) return 0;
    int jumpone = fun(index -1 , heights) + abs(heights[index] - heights[index-1]);
    int jumptwo = INT_MAX;
    if(index - 2 >=0)
    jumptwo = fun(index - 2, heights) + abs(heights[index] - heights[index-2]);
    return min(jumpone, jumptwo);
} 
int frogJump(int n, vector<int> &heights)
{
    return fun(n-1, heights);
}

Memoization TC - O(N) SC - O(N + N)
#include <bits/stdc++.h>
int fun(int index, vector<int>& heights, vector<int>& dp)
{
    if(dp[index] != -1) return dp[index];
    if(index == 0) return 0;
    int jumpone = fun(index -1 , heights, dp) + abs(heights[index] - heights[index-1]);
    int jumptwo = INT_MAX;
    if(index - 2 >=0)
    jumptwo = fun(index - 2, heights, dp) + abs(heights[index] - heights[index-2]);
    return dp[index] = min(jumpone, jumptwo);
} 
int frogJump(int n, vector<int> &heights)
{
    vector<int>dp(n+1, -1);
    return fun(n-1, heights, dp);
}

Tabulation TC - O(N) SC - O(N)
#include <bits/stdc++.h>

int frogJump(int n, vector<int> &heights)
{
    vector<int>dp(n);
    dp[0] = 0;
    dp[1] = abs(heights[0] - heights[1]);
    for(int i = 2; i <n; i++)
    {
        int x = dp[i-1] + abs(heights[i] - heights[i-1]);
        int y = dp[i-2] + abs(heights[i] - heights[i-2]);
        dp[i] = min(x,y);
    }
    return dp[n-1];
}

Space Optimization TC - O(N) SC- O(1)
#include <bits/stdc++.h>

int frogJump(int n, vector<int> &heights)
{
    int prev1 = 0;
    int prev2 = abs(heights[0] - heights[1]);
    for(int i = 2; i <n; i++)
    {
        int x = prev2 + abs(heights[i] - heights[i-1]);
        int y = prev1 + abs(heights[i] - heights[i-2]);
        int curr = min(x,y);
        prev1 = prev2;
        prev2 = curr;
    }
    return prev2;
}
