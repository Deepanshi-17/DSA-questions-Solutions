Recursion - TC - 0(2^N) + O(N) SC - O(N)

bool fun(int n, int index, int target, vector<int>& arr)
{
	if(index < 0) return false;
	if(target == 0) return true;
	bool not_take = fun(n, index - 1, target, arr);
	bool take = false;
	if(arr[index] <= target)
	{
		take = fun(n, index -1, target - arr[index], arr);
	}
	return take || not_take;
}

bool canPartition(vector<int> &arr, int n)
{
	int tot_sum = 0;
	for(int i = 0; i < n; i++)
	{
		tot_sum += arr[i];
	}
	if(tot_sum % 2 != 0)
	return false;
	int k = tot_sum /2;
	return fun(n,n-1,k,arr);
}

Memoization TC - O(N*K) SC - O(N*K) + O(N)
bool fun(int n, int index, int target, vector<int>& arr, vector<vector<int>>& dp)
{
	if(index < 0) return false;
	if(dp[index][target] != -1) return dp[index][target];
	if(target == 0) return true;
	bool not_take = fun(n, index - 1, target, arr, dp);
	bool take = false;
	if(arr[index] <= target)
	{
		take = fun(n, index -1, target - arr[index], arr, dp);
	}
	return dp[index][target] = take || not_take;
}

bool canPartition(vector<int> &arr, int n)
{
	int tot_sum = 0;
	for(int i = 0; i < n; i++)
	{
		tot_sum += arr[i];
	}
	if(tot_sum % 2 != 0)
	return false;
	int k = tot_sum /2;
	vector<vector<int>>dp(n,vector<int>(k+1,-1));
	return fun(n,n-1,k,arr,dp);
}


Tabulation TC - O(N*K) + O(N) SC - O(N*K)
bool fun(int n, int k, vector<int>& arr, vector<vector<int>>& dp)
{

	for(int i = 0; i < n; i++)
	{
		dp[i][0] = true;
	}
	if(arr[0] <= k)
	{
		dp[0][arr[0]] = true;
	}

	for(int i = 1; i < n; i++)
	{
		for(int j = 1; j <=k; j++)
		{
			bool not_take = dp[i-1][j];
			bool take = false;
			if(arr[i] <= j)
			{
				take = dp[i-1][j-arr[i]];
			}
			dp[i][j] = take || not_take;
		}
	}
	return dp[n-1][k];
}

bool canPartition(vector<int> &arr, int n)
{
	int tot_sum = 0;
	for(int i = 0; i < n; i++)
	{
		tot_sum += arr[i];
	}
	if(tot_sum % 2 != 0)
	return false;
	int k = tot_sum /2;
	vector<vector<int>>dp(n,vector<int>(k+1));
	return fun(n,k,arr,dp);
}

Space Optimization TC - O(N) + O(N*K) SC - O(K)
bool fun(int n, int k, vector<int>& arr)
{
	vector<int>prev(k+1);
	for(int i = 0; i < n; i++)
	{
		prev[0] = true;
	}
	if(arr[0] <= k)
	{
		prev[arr[0]] = true;
	}

	for(int i = 1; i < n; i++)
	{
		vector<int>temp(k+1);
		temp[0] = true;
		for(int j = 1; j <=k; j++)
		{
			bool not_take = prev[j];
			bool take = false;
			if(arr[i] <= j)
			{
				take = prev[j-arr[i]];
			}
			temp[j] = take || not_take;
		}
		prev = temp;
	}
	return prev[k];
}

bool canPartition(vector<int> &arr, int n)
{
	int tot_sum = 0;
	for(int i = 0; i < n; i++)
	{
		tot_sum += arr[i];
	}
	if(tot_sum % 2 != 0)
	return false;
	int k = tot_sum /2;
	return fun(n,k,arr);
}

Space Optimization TC - SC -
