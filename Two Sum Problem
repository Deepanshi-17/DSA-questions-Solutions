Solution 1 - Two for loops TC- (O(N^2)) SC - O(1)

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        for(int i = 0; i < nums.size(); i++)
        {
            for(int j = i+1; j < nums.size(); j++)
            {
                if(nums[i] + nums[j] == target)
                return {i,j};
            }
        }
        return {-1,-1};
    }
};

Solution 2 - Using map data structure TC - O(N^2) SC - O(N)

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        unordered_map<int,int>mp;
        for(int i = 0; i < nums.size(); i++)
        {
            if(mp.find(target-nums[i]) != mp.end())
            return{mp[target-nums[i]],i};
            else
            mp[nums[i]] = i;
        }
        return {-1,-1};
    }
};

Solution 3 - By sorting TC - O(N) + O(NlogN) + o(N) SC - O(N)
class Solution {
public:
    static bool cmp(const pair<int,int>& p1, const pair<int,int>& p2)
    {
        return p1.first < p2.first;
    }
    vector<int> twoSum(vector<int>& nums, int target) {
        vector<pair<int,int>>v;
        for(int i = 0; i < nums.size(); i++)
        {
            v.push_back({nums[i],i});
        }
        sort(v.begin(),v.end(),cmp);
        int i  = 0;
        int j = v.size()-1;
        while(i < j)
        {
            if(v[i].first + v[j].first == target)
            return {v[i].second, v[j].second};
            else if(v[i].first + v[j].first < target)
            i++;
            else
            j--;
        }
        return {-1,-1};
    }
};

